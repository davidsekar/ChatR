'use strict';

var ChatItem = React.createClass({
    displayName: 'ChatItem',


    render: function render() {
        var itemStyle = 'chatItem';
        var userNameStyle = this.props.source === 'client' ? 'clientUserName' : 'serverUserName';
        var messageStyle = this.props.source === 'client' ? 'clientMessage' : 'serverMessage';

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: itemStyle },
                React.createElement(
                    'div',
                    { className: userNameStyle },
                    this.props.username
                ),
                React.createElement(
                    'div',
                    { className: messageStyle },
                    this.props.text
                )
            )
        );
    }

});
'use strict';

var ChatInitialization = React.createClass({
    displayName: 'ChatInitialization',


    initializeUser: function initializeUser() {
        var $userNameInput = $(ReactDOM.findDOMNode(this)).find('input[data-username]');
        var userName = $userNameInput.val();
        this.props.initialize(userName);
    },

    render: function render() {
        return React.createElement(
            'div',
            null,
            'Enter the user name:',
            React.createElement('input', { type: 'text', 'data-username': true }),
            '  ',
            React.createElement(
                'a',
                { onClick: this.initializeUser, href: '#' },
                'Start Chatting!'
            )
        );
    }

});
'use strict';

var UserList = React.createClass({
	displayName: 'UserList',


	render: function render() {
		var users = [];
		var i = 0;

		for (; i < this.props.users.length; i++) {
			users.push(React.createElement(
				'div',
				{ key: i, className: 'userItem' },
				this.props.users[i]
			));
		}

		return React.createElement(
			'div',
			{ style: { overflow: 'hidden', display: 'block', float: 'left', padding: '2px' } },
			React.createElement(
				'h4',
				null,
				'Participants'
			),
			users
		);
	}

});
'use strict';

var ChatWindow = React.createClass({
    displayName: 'ChatWindow',


    sendMessage: function sendMessage() {
        var $messageInput = $(ReactDOM.findDOMNode(this)).find('input[data-message]');
        var message = $messageInput.val();
        this.props.sendmessage(message);
        $messageInput.val('');
    },

    componentDidUpdate: function componentDidUpdate() {
        var $messageInput = $(ReactDOM.findDOMNode(this)).find('div[data-messages]');
        if ($messageInput.length) {
            $messageInput[0].scrollTop = $messageInput[0].scrollHeight;
        }
    },

    render: function render() {
        var items = [];
        var i = 0;
        var userId;

        if (this.props.messages.length) {
            for (; i < this.props.messages.length; i++) {
                userId = this.props.messages[i].UserId;
                items.push(React.createElement(ChatItem, {
                    username: this.props.messages[i].UserName,
                    datetime: this.props.messages[i].DateTime,
                    source: userId === this.props.userid ? 'client' : 'server',
                    text: this.props.messages[i].Message, key: i
                }));
            }
        }

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { style: { overflow: 'hidden' } },
                React.createElement(
                    'div',
                    { 'data-messages': true, className: 'messagesDiv' },
                    items
                ),
                React.createElement(UserList, { users: this.props.users })
            ),
            React.createElement(
                'div',
                { style: { display: 'block', width: '400px' } },
                'Message: ',
                React.createElement('input', { type: 'text', 'data-message': true }),
                '   ',
                React.createElement(
                    'a',
                    { onClick: this.sendMessage, href: '#' },
                    'Send'
                )
            )
        );
    }

});
'use strict';

var MainChat = React.createClass({
	displayName: 'MainChat',


	getInitialState: function getInitialState() {
		return {
			ChatHub: $.connection.ChatRHub,
			Messages: [],
			UserInitialized: false,
			UserName: '',
			UserId: '00000000-0000-0000-0000-000000000000',
			Users: []
		};
	},

	pushNewMessage: function pushNewMessage(id, userId, userName, message, dateTime) {
		var msgs = this.state.Messages;
		msgs.push({
			Id: id,
			UserId: userId,
			UserName: userName,
			Message: message,
			DateTime: dateTime
		});
		this.setState({
			Messages: msgs
		});
	},

	pushUserList: function pushUserList(userList) {
		this.setState({
			Users: userList
		});
	},

	componentWillMount: function componentWillMount() {
		this.state.ChatHub.client.pushNewMessage = this.pushNewMessage;
		this.state.ChatHub.client.pushUserList = this.pushUserList;
		$.connection.hub.start().done(function () {
			console.log('SignalR Hub Started!');
		});
	},

	initializeUser: function initializeUser(userName) {
		var component = this;
		$.getJSON('./api/Chat/?userName=' + userName).then(function (userId) {
			component.setState({
				UserInitialized: true,
				UserName: userName,
				UserId: userId
			});
		});
	},

	sendMessage: function sendMessage(message) {
		var messageObj = {
			Id: '00000000-0000-0000-0000-000000000000',
			UserId: this.state.UserId,
			UserName: this.state.UserName,
			Message: message,
			DateTime: new Date()
		};
		$.ajax({
			method: 'post',
			url: './api/Chat/',
			data: JSON.stringify(messageObj),
			dataType: "json",
			contentType: "application/json; charset=utf-8"
		});
	},

	render: function render() {
		if (this.state.UserInitialized) {
			return React.createElement(ChatWindow, {
				messages: this.state.Messages,
				username: this.state.UserName,
				userid: this.state.UserId,
				sendmessage: this.sendMessage,
				users: this.state.Users });
		} else {
			return React.createElement(ChatInitialization, { initialize: this.initializeUser });
		}
	}

});
'use strict';

ReactDOM.render(React.createElement(MainChat, null), document.getElementById('container'));